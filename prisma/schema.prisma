// Esquema actualizado de Prisma para el CRUD de fincas
// Incluye el modelo detallado de Finca, el enum TipoPropiedad y el modelo InfraestructuraFinca

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Definimos un enumerador para el tipo de propiedad, 
// lo que garantiza la consistencia de los datos.
enum TipoPropiedad {
  ESTATAL
  PRIVADA
}

// Modelo principal para la Finca
model Finca {
  id                          Int      @id @default(autoincrement())
  nombre                      String   @unique
  descripcion                 String?
  localizacion                String
  propietario                 String
  // URL pública opcional a la foto de la finca (guardada en /public/uploads)
  fotoUrl                     String?
  tipoPropiedad               TipoPropiedad
  entidadPertenece            String?
  usoActual                   String?
  estadoConservacion          String?
  problematicaDetectada       String?
  tradicionesHistoria         String?
  infraestructura             InfraestructuraFinca?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // Relaciones normalizadas
  elementosInteres            ElementoInteres[]
  actividadesAgroturisticas   ActividadAgroturistica[]
  principiosSustentabilidad   PrincipioSustentabilidad[]
  accionesAmbientales         AccionAmbiental[]
  diagnosticos                Diagnostico[]
}

model ElementoInteres {
  id        Int    @id @default(autoincrement())
  nombre    String
  finca     Finca  @relation(fields: [fincaId], references: [id], onDelete: Cascade)
  fincaId   Int
}

model ActividadAgroturistica {
  id        Int    @id @default(autoincrement())
  nombre    String
  finca     Finca  @relation(fields: [fincaId], references: [id], onDelete: Cascade)
  fincaId   Int
}

model PrincipioSustentabilidad {
  id        Int    @id @default(autoincrement())
  nombre    String
  finca     Finca  @relation(fields: [fincaId], references: [id], onDelete: Cascade)
  fincaId   Int
}

model AccionAmbiental {
  id        Int    @id @default(autoincrement())
  nombre    String
  finca     Finca  @relation(fields: [fincaId], references: [id], onDelete: Cascade)
  fincaId   Int
}

// Modelo relacionado para la infraestructura complementaria
model InfraestructuraFinca {
  id                    Int     @id @default(autoincrement())
  fincaId               Int     @unique
  finca                 Finca   @relation(fields: [fincaId], references: [id], onDelete: Cascade)
  transporteAccesible   Boolean @default(false)
  coberturaTelefonica   Boolean @default(false)
  tieneRestaurante      Boolean @default(false)
  conexionSaneamiento   Boolean @default(false)
  sistemaTratamientoAguas Boolean @default(false)
  usoEnergiasRenovables Boolean @default(false)
}


model Diagnostico {
  id      String @id @default(cuid())
  
  // Relación con Finca
  // Relación con Finca: DEBE ser String
  fincaId Int 
  finca   Finca  @relation(fields: [fincaId], references: [id])
  
  // Resultado del cálculo
  puntuacionTotal Float // Suma de (VI * PI)
  resultadoFinal  String  // "Apta" o "No apta" (basado en el umbral de 2.02)
  
  // Respuestas del Cuestionario (Valoración Int - VI)
  // Utilizamos los códigos (A, B, C...) como nombres de campos.
  criterioA Int // Existencia de una casa rural o rancho campestre (Max 2)
  criterioB Int // Capacidad de recibir clientes (Max 2)
  criterioC Int // Accesibilidad (Max 3)
  criterioD Int // Distribución de las áreas según su uso agropecuario (Max 3)
  criterioE Int // Sustentabilidad agrícola (Max 4)
  criterioF Int // Categorización del espacio rural circundante (Max 3)
  criterioG Int // Manejo sostenible de las tierras (Max 4)
  criterioH Int // Aprovechamiento de los recursos naturales o construidos (Max 4)
  criterioI Int // Infraestructura disponible (Max 4)
  criterioJ Int // Cercanía a sitios con valores socioculturales y centros nodales (Max 4)
  criterioK Int // Entorno atractivo (Max 4)
  
  createdAt DateTime @default(now())

  @@index([fincaId])
}